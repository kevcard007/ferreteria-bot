import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai
from PIL import Image
import io
from database import FerreteriaDB  # Usar tu clase existente

# Cargar variables de entorno desde el archivo .env
load_dotenv()

# URL del dashboard (cambiar por tu URL real de Railway)
DASHBOARD_URL = os.getenv('DASHBOARD_URL', 'https://marvelous-enchantment-production-b36d.up.railway.app/')

# Configurar logging para ver qu√© pasa
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configurar Google Gemini
genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
model = genai.GenerativeModel('gemini-1.5-flash')

# Inicializar base de datos PostgreSQL
print("üóÑÔ∏è Inicializando PostgreSQL...")
try:
    db = FerreteriaDB()
    print("‚úÖ PostgreSQL conectado correctamente")
    USING_POSTGRES = True
except Exception as e:
    print(f"‚ùå Error conectando PostgreSQL: {e}")
    print("üîÑ Cayendo a SQLite como backup...")
    USING_POSTGRES = False
    
    # Funci√≥n de respaldo SQLite (solo por si falla PostgreSQL)
    import sqlite3
    def init_sqlite():
        conn = sqlite3.connect('ferreteria.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS productos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                precio REAL NOT NULL,
                categoria TEXT NOT NULL,
                codigo TEXT,
                descripcion TEXT NOT NULL,
                fecha_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                usuario_telegram INTEGER NOT NULL,
                usuario_nombre TEXT
            )
        ''')
        conn.commit()
        conn.close()
    
    def insertar_producto_sqlite(precio, categoria, codigo, descripcion, usuario_telegram, usuario_nombre):
        try:
            conn = sqlite3.connect('ferreteria.db')
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO productos (precio, categoria, codigo, descripcion, usuario_telegram, usuario_nombre)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (precio, categoria, codigo, descripcion, usuario_telegram, usuario_nombre))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            print(f"‚ùå Error SQLite: {e}")
            return False
    
    init_sqlite()

# Funciones de utilidad (las mismas que ten√≠as)
def extraer_precio_de_texto(texto):
    import re
    patrones = [
        r'\$\s*(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)',
        r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*\$',
        r'(\d+(?:\.\d{2})?)'
    ]
    for patron in patrones:
        match = re.search(patron, texto)
        if match:
            precio_str = match.group(1).replace(',', '')
            try:
                return float(precio_str)
            except ValueError:
                continue
    return None

def normalizar_categoria(texto):
    texto_lower = texto.lower()
    if 'verde' in texto_lower or 'agricultura' in texto_lower:
        return 'Verde-Agricultura'
    elif 'rojo' in texto_lower or 'construcci√≥n' in texto_lower or 'construccion' in texto_lower:
        return 'Rojo-Construcci√≥n'
    elif 'amarillo' in texto_lower or 'pintura' in texto_lower:
        return 'Amarillo-Pintura'
    else:
        return 'Sin categor√≠a'

# Funci√≥n que se ejecuta cuando alguien escribe /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Mensaje de bienvenida cuando inician el bot"""
    db_status = "PostgreSQL ‚úÖ" if USING_POSTGRES else "SQLite (backup) ‚ö†Ô∏è"
    
    welcome_message = f"""
üîß *¬°Bienvenido al Bot de Ferreter√≠a!* üîß

Env√≠ame una foto de la etiqueta de tu producto y yo:
‚Ä¢ Extraer√© precio, categor√≠a, c√≥digo y descripci√≥n
‚Ä¢ Guardar√© el registro en la base de datos ({db_status})
‚Ä¢ Te dar√© un resumen del an√°lisis

*Categor√≠as que reconozco:*
üü¢ Verde = Agricultura
üî¥ Rojo = Construcci√≥n  
üü° Amarillo = Pintura

¬°Solo env√≠a la foto y yo me encargo del resto!

üìä *Ver dashboard en tiempo real*: [Click aqu√≠]({DASHBOARD_URL})
üåê *Datos sincronizados autom√°ticamente*
    """
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

# Funci√≥n que se ejecuta cuando reciben una foto
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Procesa las fotos que env√≠an los usuarios"""
    try:
        # Obtener informaci√≥n del usuario
        user = update.effective_user
        user_id = user.id
        user_name = user.first_name or "Usuario"
        
        # Obtener la foto
        photo = update.message.photo[-1]  # La √∫ltima es la de mayor calidad
        
        # Descargar la foto
        photo_file = await photo.get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        
        # Convertir bytes a imagen PIL
        image = Image.open(io.BytesIO(photo_bytes))
        
        # Enviar mensaje de que estamos procesando
        await update.message.reply_text("üì∏ Analizando la etiqueta... Un momento por favor.")
        
        # Prompt mejorado para Google Gemini
        prompt = """Analiza esta etiqueta de producto de ferreter√≠a y extrae la siguiente informaci√≥n:

1. PRECIO: El precio del producto (busca n√∫meros con $ o signos de moneda)
2. CATEGOR√çA: Identifica el color de la etiqueta y clasif√≠cala:
   - Si es Verde ‚Üí "Verde-Agricultura"
   - Si es Rojo ‚Üí "Rojo-Construcci√≥n"  
   - Si es Amarillo ‚Üí "Amarillo-Pintura"
3. C√ìDIGO: Cualquier c√≥digo, referencia, SKU o ID del producto
4. DESCRIPCI√ìN: Nombre completo o descripci√≥n del producto

Responde EXACTAMENTE en este formato:
PRECIO: $[cantidad]
CATEGOR√çA: [Color-Tipo]
C√ìDIGO: [c√≥digo o "No visible"]
DESCRIPCI√ìN: [nombre del producto]

Si no puedes ver claramente alg√∫n dato, escribe "No visible" en esa secci√≥n.
S√© muy preciso con los n√∫meros y textos."""
        
        # Analizar con Google Gemini
        response = model.generate_content([prompt, image])
        resultado_gemini = response.text
        
        # Procesar la respuesta de Gemini para extraer datos estructurados
        precio = None
        categoria = "Sin categor√≠a"
        codigo = "No visible"
        descripcion = "Sin descripci√≥n"
        
        # Parsear la respuesta l√≠nea por l√≠nea
        lineas = resultado_gemini.strip().split('\n')
        for linea in lineas:
            linea = linea.strip()
            if linea.startswith('PRECIO:'):
                precio_texto = linea.replace('PRECIO:', '').strip()
                precio = extraer_precio_de_texto(precio_texto)
            elif linea.startswith('CATEGOR√çA:') or linea.startswith('CATEGORIA:'):
                categoria_texto = linea.replace('CATEGOR√çA:', '').replace('CATEGORIA:', '').strip()
                categoria = normalizar_categoria(categoria_texto)
            elif linea.startswith('C√ìDIGO:') or linea.startswith('CODIGO:'):
                codigo = linea.replace('C√ìDIGO:', '').replace('CODIGO:', '').strip()
                if codigo.lower() in ['no visible', 'no encontrado', '']:
                    codigo = "No visible"
            elif linea.startswith('DESCRIPCI√ìN:') or linea.startswith('DESCRIPCION:'):
                descripcion = linea.replace('DESCRIPCI√ìN:', '').replace('DESCRIPCION:', '').strip()
        
        # Guardar en base de datos
        guardado_exitoso = False
        if precio and precio > 0:
            if USING_POSTGRES:
                # Usar PostgreSQL (sincronizado con dashboard)
                guardado_exitoso = db.insertar_producto(
                    precio, categoria, codigo, descripcion, user_id, user_name
                )
                db_usado = "PostgreSQL ‚úÖ"
            else:
                # Fallback a SQLite
                guardado_exitoso = insertar_producto_sqlite(
                    precio, categoria, codigo, descripcion, user_id, user_name
                )
                db_usado = "SQLite (backup) ‚ö†Ô∏è"
        
        # Preparar respuesta para el usuario
        if guardado_exitoso:
            sync_status = "üåê Sincronizado con dashboard web" if USING_POSTGRES else "‚ö†Ô∏è No sincronizado con dashboard"
            
            respuesta = f"""‚úÖ *Producto registrado exitosamente*

üìã *Informaci√≥n extra√≠da:*
üí∞ Precio: ${precio:,.2f}
üìÇ Categor√≠a: {categoria}
üè∑Ô∏è C√≥digo: {codigo}
üìù Descripci√≥n: {descripcion}
üë§ Registrado por: {user_name}

üíæ *Estado*: Guardado en {db_usado}
{sync_status}

üìä *Ver en dashboard*: [Click aqu√≠]({DASHBOARD_URL})"""
        else:
            respuesta = f"""‚ö†Ô∏è *An√°lisis completado (no guardado)*

üìã *Informaci√≥n extra√≠da:*
{resultado_gemini}

‚ùå *No se pudo guardar*: Precio no detectado o inv√°lido
üí° *Consejo*: Aseg√∫rate de que el precio sea visible en la etiqueta

üìä *Ver dashboard*: [Click aqu√≠]({DASHBOARD_URL})"""
        
        await update.message.reply_text(respuesta, parse_mode='Markdown')
        
        # Log para debugging
        logger.info(f"An√°lisis para usuario {user_id}: precio={precio}, categoria={categoria}, db={db_usado}")
        
    except Exception as e:
        logger.error(f"Error procesando foto: {e}")
        await update.message.reply_text(
            "‚ùå Hubo un error procesando la imagen. "
            "Por favor, aseg√∫rate de que sea una foto clara de la etiqueta e intenta de nuevo."
        )

# Funci√≥n para mostrar estad√≠sticas del d√≠a
async def estadisticas_hoy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Muestra las estad√≠sticas de ventas del d√≠a actual"""
    try:
        if USING_POSTGRES:
            # Usar PostgreSQL
            total_ventas = db.obtener_total_ventas_hoy()
            ventas_hoy = db.obtener_ventas_hoy()
            productos_por_categoria = db.obtener_productos_por_categoria()
            total_productos = len(ventas_hoy)
            db_status = "PostgreSQL ‚úÖ (sincronizado con dashboard)"
        else:
            # Fallback SQLite
            import sqlite3
            conn = sqlite3.connect('ferreteria.db')
            cursor = conn.cursor()
            
            # Total del d√≠a
            cursor.execute("""
                SELECT COUNT(*), COALESCE(SUM(precio), 0) 
                FROM productos 
                WHERE DATE(fecha_hora) = DATE('now')
            """)
            total_productos, total_ventas = cursor.fetchone()
            
            # Por categor√≠as del d√≠a
            cursor.execute("""
                SELECT categoria, COUNT(*), SUM(precio) 
                FROM productos 
                WHERE DATE(fecha_hora) = DATE('now')
                GROUP BY categoria
            """)
            categorias_raw = cursor.fetchall()
            productos_por_categoria = {}
            for cat, count, total in categorias_raw:
                productos_por_categoria[cat] = {"cantidad": count, "total": total}
            
            conn.close()
            db_status = "SQLite ‚ö†Ô∏è (no sincronizado)"
        
        # Preparar mensaje
        mensaje = f"""üìä *Estad√≠sticas del d√≠a*

üí∞ *Total vendido hoy*: ${total_ventas:,.2f}
üì¶ *Productos registrados*: {total_productos}
üóÑÔ∏è *Base de datos*: {db_status}

üìÇ *Por categor√≠a:*"""
        
        if productos_por_categoria:
            for categoria, datos in productos_por_categoria.items():
                mensaje += f"\n‚Ä¢ {categoria}: {datos['cantidad']} productos (${datos['total']:,.2f})"
        else:
            mensaje += "\n‚Ä¢ No hay registros del d√≠a"
        
        # √öltimos productos registrados (solo para PostgreSQL)
        if USING_POSTGRES and len(ventas_hoy) > 0:
            mensaje += "\n\nüïí *√öltimos registros:*"
            for i, producto in enumerate(ventas_hoy[:3]):  # Solo los primeros 3
                descripcion = producto.get('descripcion', 'Sin descripci√≥n')
                precio = producto.get('precio', 0)
                mensaje += f"\n‚Ä¢ {descripcion} - ${precio:,.2f}"
        
        # Agregar enlace al dashboard
        mensaje += f"\n\nüìä *Ver dashboard completo*: [Click aqu√≠]({DASHBOARD_URL})"
        
        await update.message.reply_text(mensaje, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error obteniendo estad√≠sticas: {e}")
        await update.message.reply_text("‚ùå Error obteniendo estad√≠sticas.")

# Funci√≥n para mensajes de texto
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Responde a mensajes de texto normales"""
    db_status = "PostgreSQL (sincronizado)" if USING_POSTGRES else "SQLite (no sincronizado)"
    
    await update.message.reply_text(
        f"üì∏ Por favor env√≠a una foto de la etiqueta del producto para analizarla.\n\n"
        f"üìä Escribe /estadisticas para ver el resumen del d√≠a\n"
        f"üÜò Escribe /help para m√°s informaci√≥n\n"
        f"üìä *Dashboard web*: [Click aqu√≠]({DASHBOARD_URL})\n\n"
        f"üóÑÔ∏è *Base de datos activa*: {db_status}",
        parse_mode='Markdown'
    )

# Comando espec√≠fico para el dashboard (NUEVO)
async def dashboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando para enviar directamente el enlace del dashboard"""
    db_status = "sincronizado" if USING_POSTGRES else "no sincronizado"
    
    mensaje = f"""üìä *Dashboard de Ferreter√≠a*

üåê *Ver datos en tiempo real*: [Click aqu√≠]({DASHBOARD_URL})

*¬øQu√© puedes ver en el dashboard?*
‚Ä¢ üí∞ Total de ventas del d√≠a
‚Ä¢ üì¶ N√∫mero de productos registrados
‚Ä¢ üìä Gr√°ficos por categor√≠a
‚Ä¢ üìà Evoluci√≥n temporal
‚Ä¢ üìã Lista detallada de productos

*Estado*: {db_status} con el bot
*Actualizaci√≥n*: Los datos aparecen autom√°ticamente cuando registras productos"""

    await update.message.reply_text(mensaje, parse_mode='Markdown')

# Funci√≥n para mostrar ayuda
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Muestra informaci√≥n de ayuda"""
    db_status = "PostgreSQL ‚úÖ" if USING_POSTGRES else "SQLite (backup) ‚ö†Ô∏è"
    sync_status = "üåê Datos sincronizados con dashboard web" if USING_POSTGRES else "‚ö†Ô∏è Datos NO sincronizados con dashboard"
    
    help_text = f"""
üÜò *Ayuda - Bot de Ferreter√≠a*

*üì∏ ¬øC√≥mo registrar productos?*
1. Env√≠a una foto clara de la etiqueta
2. El bot analizar√° autom√°ticamente la informaci√≥n
3. Si detecta un precio v√°lido, se guardar√° en la base de datos

*üìä Estado actual:*
üóÑÔ∏è Base de datos: {db_status}
{sync_status}

*üìä Comandos disponibles:*
/start - Mensaje de bienvenida
/estadisticas - Ver resumen de ventas del d√≠a
/dashboard - Enlace directo al dashboard web
/help - Esta ayuda

*üåê Dashboard web:*
[Ver dashboard en tiempo real]({DASHBOARD_URL})

*üéØ Consejos para mejores resultados:*
‚Ä¢ Foto con buena iluminaci√≥n
‚Ä¢ Etiqueta completamente visible
‚Ä¢ Sin reflejos o sombras
‚Ä¢ Texto del precio legible

*üè∑Ô∏è Categor√≠as autom√°ticas:*
üü¢ Etiquetas verdes = Agricultura
üî¥ Etiquetas rojas = Construcci√≥n
üü° Etiquetas amarillas = Pintura

¬øProblemas? Intenta con otra foto m√°s clara.
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main() -> None:
    """Funci√≥n principal que ejecuta el bot"""
    # Verificar que tenemos los tokens necesarios
    telegram_token = os.getenv('TELEGRAM_TOKEN')
    google_api_key = os.getenv('GOOGLE_API_KEY')
    
    if not telegram_token:
        print("‚ùå Error: TELEGRAM_TOKEN no encontrado en el archivo .env")
        return
    
    if not google_api_key:
        print("‚ùå Error: GOOGLE_API_KEY no encontrado en el archivo .env")
        return
    
    # Mostrar informaci√≥n de configuraci√≥n
    print(f"üåê Dashboard URL configurada: {DASHBOARD_URL}")
    
    # Mostrar estado de la base de datos
    db_info = "PostgreSQL (sincronizado con dashboard)" if USING_POSTGRES else "SQLite (backup, no sincronizado)"
    print(f"üóÑÔ∏è Base de datos activa: {db_info}")
    
    if not USING_POSTGRES:
        print("‚ö†Ô∏è  IMPORTANTE: Para sincronizar con el dashboard, configura las variables de PostgreSQL")
        print("   Variables necesarias: DATABASE_URL, PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD")
    
    # Crear la aplicaci√≥n del bot
    application = Application.builder().token(telegram_token).build()
    
    # Agregar manejadores (handlers)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("estadisticas", estadisticas_hoy))
    application.add_handler(CommandHandler("dashboard", dashboard_command))  # COMANDO AGREGADO
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # Iniciar el bot
    print("ü§ñ Bot iniciando con Google Gemini y Base de Datos...")
    print("üìä Enlaces al dashboard incluidos en todas las respuestas")
    print("‚úÖ Bot activo. Presiona Ctrl+C para detener.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()